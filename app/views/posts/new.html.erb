
<%= provide(:title, 'Create Posts') %>
<div class="row">

<%= render 'shared/post_form' %>


</div>


<script>


		// This code is generally not necessary, but it is here to demonstrate
		// how to customize specific editor instances on the fly. This fits well
		// this demo because we have editable elements (like headers) that
		// require less features.

		// The "instanceCreated" event is fired for every editor instance created.
		CKEDITOR.on( 'instanceCreated', function( event ) {
			var editor = event.editor,
				element = editor.element;

			// Customize editors for headers and tag list.
			// These editors don't need features like smileys, templates, iframes etc.
			if ( element.is( 'h1', 'h2', 'h3' ) || element.getAttribute( 'id' ) == 'taglist' ) {
				// Customize the editor configurations on "configLoaded" event,
				// which is fired after the configuration file loading and
				// execution. This makes it possible to change the
				// configurations before the editor initialization takes place.
				editor.on( 'configLoaded', function() {

					// Remove unnecessary plugins to make the editor simpler.
					editor.config.removePlugins = 'colorbutton,find,flash,font,' +
						'forms,iframe,image,newpage,removeformat,' +
						'smiley,specialchar,stylescombo,templates';

					// Rearrange the layout of the toolbar.
					editor.config.toolbarGroups = [
						{ name: 'editing',		groups: [ 'basicstyles', 'links' ] },
						{ name: 'undo' },
						{ name: 'clipboard',	groups: [ 'selection', 'clipboard' ] },
						{ name: 'about' }
					];
				});
			}

			else {

				editor.on( 'configLoaded', function() {
					editor.config.toolbarGroups = [
						{ name: 'editing',		groups: [ 'basicstyles', 'links' ] },
						{ name: 'undo' }
					];
				});
			}
		});



	</script>
	<script>

		   var sroot = {
					contentHash: function() {
						var cdict = {},
							inlinecontainer = $('#editable_container');
						inlinecontainer.find('div[contenteditable=true]').each( 						function(){
														var self = $(this),
														key = self.attr('id'),
														value = self.html();
														cdict[key] = value;

															});
						console.log(cdict)

						var str = "&& "
						for (var index in cdict){
						    temp = index + " : " + cdict[index] + " && ",
						    str = str.concat(temp);
						}
						
						
						return str


					},
					setData: function() {
					var formContainer = $('#new_post'),
						inlinecontainer = $('#editable_container');
					formContainer.find('input[name="title"]').val(inlinecontainer.find('#keyone').html()).end()
						.find('input[name="content"]').val(sroot.contentHash() );

				}

				}
				function myfunction () {
					//debugger;
					sroot.setData();
				}



    </script>
    