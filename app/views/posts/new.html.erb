
<%= provide(:title, 'Create Posts') %>
<div class="row">

<%= render 'shared/post_form' %>


</div>


<script>


		// This code is generally not necessary, but it is here to demonstrate
		// how to customize specific editor instances on the fly. This fits well
		// this demo because we have editable elements (like headers) that
		// require less features.

		// The "instanceCreated" event is fired for every editor instance created.
		CKEDITOR.on( 'instanceCreated', function( event ) {

			event.editor.dataProcessor.writer.setRules( ('p','h1','h2','h3'
         {
            indent : false,
            breakBeforeOpen : false,
            breakAfterOpen : false,
            breakBeforeClose : false,
            breakAfterClose : false
         });
			var editor = event.editor,
				element = editor.element;

			// Customize editors for headers and tag list.
			// These editors don't need features like smileys, templates, iframes etc.
			
				// Customize the editor configurations on "configLoaded" event,
				// which is fired after the configuration file loading and
				// execution. This makes it possible to change the
				// configurations before the editor initialization takes place.
				editor.on( 'configLoaded', function() {

					// Remove unnecessary plugins to make the editor simpler.
					editor.config.removePlugins = 'colorbutton,find,flash,font,' +
						'forms,iframe,image,newpage,removeformat,' +
						'smiley,specialchar,stylescombo,templates';

					// Rearrange the layout of the toolbar.
					editor.config.toolbarGroups = [
						{ name: 'editing',		groups: [ 'basicstyles', 'links' ] },
						{ name: 'undo' },
						{ name: 'clipboard',	groups: [ 'selection', 'clipboard' ] },
						{ name: 'about' }
					];
				});
			
		});



	</script>
	<script>

		   var sroot = {
					contentHash: function() {
						
						var cdict = {},
							inlinecontainer = $('#editable_container');
						inlinecontainer.find('div[contenteditable=true]').each( 						function(){
														var self = $(this),
														key = self.attr('id'),
														value = self.html();
														cdict[key] = value;

															});

				          if (url_values.length == 0) {
				                url_values.push('array is empty');
				                
				            }
						cdict["urls"] = url_values
						console.log(cdict)

						var str = ""
						for (var index in cdict){

						    temp = index + " ::: " + cdict[index] + " && ",
						    str = str.concat(temp);
						}
						str = str.substring(0, str.length - 4)
						console.log(str)
						return str
						

					},
					setData: function() {
							var inlinecontainer = $('#editable_container');	
							var Title = inlinecontainer.find('#keyone').html();
							var Content = sroot.contentHash();
							$.ajax({
							    type: "POST",
							    url: "/posts",
							    cache: false,
							    data: {post: {title: Title, content: Content}},
							    success: function (data) { 
							    	success_callback(data) },
		        				fail: function (data) { 
		        					fail_callback(data) }
							    
							 
							});

					}

				}
				function myfunction () {
					//debugger;
					sroot.setData();

				}



    </script>
    